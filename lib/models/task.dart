// Task data model representing a single task in the Study Planner App
// Handles data serialization/deserialization for database storage
// Provides utility methods for date formatting and task status checking

import 'package:intl/intl.dart';  // For date/time formatting

/// Data model class representing a task with all its properties
/// Supports serialization to/from Map for database storage
/// Includes utility methods for formatting and status checking
class Task {
  // Task properties - immutable fields for data integrity
  final int? id;              // Database primary key (null for new tasks)
  final String title;         // Task title (required field)
  final String? description;  // Optional detailed description
  final DateTime dueDate;     // When the task is due (required)
  final DateTime? reminderTime; // Optional reminder notification time
  final bool isCompleted;     // Task completion status (default: false)

  /// Constructor for creating a Task instance
  /// [title] and [dueDate] are required fields
  /// [id] is null for new tasks, set by database after insertion
  /// [isCompleted] defaults to false for new tasks
  Task({
    this.id,                    // Auto-generated by database
    required this.title,        // Must provide task title
    this.description,           // Optional description
    required this.dueDate,      // Must provide due date
    this.reminderTime,          // Optional reminder time
    this.isCompleted = false,   // Default to incomplete
  });

  /// Converts Task object to Map for database storage
  /// Serializes DateTime objects to milliseconds since epoch for SQLite compatibility
  /// Converts boolean isCompleted to integer (1 for true, 0 for false)
  /// Returns Map<String, dynamic> suitable for database insertion/update
  Map<String, dynamic> toMap() {
    return {
      'id': id,                                        // Primary key (can be null)
      'title': title,                                  // Task title string
      'description': description,                      // Description (can be null)
      'dueDate': dueDate.millisecondsSinceEpoch,      // Convert DateTime to int
      'reminderTime': reminderTime?.millisecondsSinceEpoch, // Convert DateTime to int (nullable)
      'isCompleted': isCompleted ? 1 : 0,             // Convert bool to int for SQLite
    };
  }

  /// Factory constructor to create Task from database Map
  /// Deserializes data from database format back to Task object
  /// Converts milliseconds back to DateTime objects
  /// Converts integer back to boolean for isCompleted field
  factory Task.fromMap(Map<String, dynamic> map) {
    return Task(
      id: map['id'],                                   // Database primary key
      title: map['title'],                             // Task title from DB
      description: map['description'],                 // Description (can be null)
      dueDate: DateTime.fromMillisecondsSinceEpoch(map['dueDate']), // Convert int back to DateTime
      reminderTime: map['reminderTime'] != null       // Handle nullable reminder time
          ? DateTime.fromMillisecondsSinceEpoch(map['reminderTime'])
          : null,
      isCompleted: map['isCompleted'] == 1,           // Convert int back to bool (1 = true)
    );
  }

  /// Creates a copy of the task with optionally updated fields
  /// Useful for updating specific properties while keeping others unchanged
  /// Uses null-aware operators to preserve existing values when new ones aren't provided
  /// Returns a new Task instance (immutable pattern)
  Task copyWith({
    int? id,                    // New ID (rarely changed after creation)
    String? title,              // New title
    String? description,        // New description
    DateTime? dueDate,          // New due date
    DateTime? reminderTime,     // New reminder time
    bool? isCompleted,          // New completion status
  }) {
    return Task(
      id: id ?? this.id,                           // Use new ID or keep existing
      title: title ?? this.title,                 // Use new title or keep existing
      description: description ?? this.description, // Use new description or keep existing
      dueDate: dueDate ?? this.dueDate,           // Use new due date or keep existing
      reminderTime: reminderTime ?? this.reminderTime, // Use new reminder or keep existing
      isCompleted: isCompleted ?? this.isCompleted,   // Use new status or keep existing
    );
  }

  // Check if task is due today
  bool get isDueToday {
    final now = DateTime.now();
    return dueDate.year == now.year &&
        dueDate.month == now.month &&
        dueDate.day == now.day;
  }

  // Check if task is overdue
  bool get isOverdue {
    return dueDate.isBefore(DateTime.now()) && !isCompleted;
  }

  // Get formatted due date string
  String get formattedDueDate {
    final formatter = DateFormat('MMM dd, yyyy');
    return formatter.format(dueDate);
  }

  // Get formatted reminder time string
  String? get formattedReminderTime {
    if (reminderTime == null) return null;
    final formatter = DateFormat('HH:mm');
    return formatter.format(reminderTime!);
  }

  @override
  String toString() {
    return 'Task{id: $id, title: $title, dueDate: $dueDate, isCompleted: $isCompleted}';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is Task && other.id == id;
  }

  @override
  int get hashCode => id.hashCode;
}
